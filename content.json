{"meta":{"title":"朝向全端之路：從基礎到進階的技術探索 by Ken","subtitle":"","description":"這是一篇關於技術學習的部落格文章，分享了撰寫技術筆記的過程。","author":"Ken Hsu","url":"https://miruorange.github.io/blog","root":"/blog/"},"pages":[{"title":"about","date":"2024-10-27T04:40:38.000Z","updated":"2024-11-16T05:14:48.908Z","comments":true,"path":"about/index.html","permalink":"https://miruorange.github.io/blog/about/index.html","excerpt":"","text":"關於我 現職：ASUS Python後端工程師人格性質：外向、喜歡與人相處、樂於學習及分享, 每天不是在學習就是在前往學習的路上 個人作品集 Gihub專案：https://github.com/MiruOrange 個人Youtube：www.youtube.com/@拍繩攻城師 個人Blog：https://miruorange.github.io/blog/ 聯絡我: &#x6d;&#x61;&#102;&#105;&#97;&#x68;&#115;&#x75;&#48;&#x2e;&#49;&#64;&#x67;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d; 專注於以下技術領域： 作業系統：Ubuntu (Linux) 資料庫：MySQL、PostgreSQL、Oracle、Redis 後端框架：Python Flask，並善於使用 async 技術以優化 I&#x2F;O 密集型應用的並發處理 前端技能：HTML, CSS,SCSS, Bootstrap, Javascript, Vue.js 任務隊列與異步處理：使用 Celery 進行任務隊列管理，讓後端處理能夠非同步執行並提升效率 容器化技術：Docker、Docker Compose CICD: Gitlab 伺服器配置：Nginx 作為反向代理和負載均衡 API 測試：Postman 資料處理：Pandas 網路爬蟲：Beautiful Soup、Selenium 影像辨識：pytesseract AI 應用：使用 GPT 模型串接 RAG 服務 第三方服務整合： LINE Google API 綠界科技 開發工具：ngrok 用於本地服務外網測試 成長及專案經驗2022 年 iThome 鐵人賽：挑戰自我、持續精進在 2022 年，我參加了 iThome 鐵人賽，這是一項每日持續挑戰的技術分享賽事。為了完成主題為「三十天全端工程師挑戰」的教學影片，我在 Raspberry Pi 上架設了簡易的購物商城，實現了基本的全端開發功能。這段經歷讓我在高度專注的狀態下學習，幾乎是「不眠不休」地完成了整個項目，讓我快速掌握了技術應用並鍛煉了專案管理能力。 Raspberry Pi 部署服務：結合硬體及軟體在學習後端技術之初，我利用 Raspberry Pi 架設了小型伺服器，並部署了網路爬蟲程式來收集數據並進行自動化處理。這是我第一次將技術應用於硬體平台，從安裝系統到配置網路，每一個步驟都讓我深刻體會到系統架設的細緻與成就感。這項經驗不僅讓我理解了硬體伺服器的部署，也大大提升了我處理網路爬蟲與數據處理的能力。在2024年, 甚至因為使用爬蟲爬取租屋網站, 獲得了Joeman的採訪。 GitLab CI&#x2F;CD 學習：實踐自動化部署為了加強 CI&#x2F;CD 能力，我利用假日時間參加了 GitLab CI&#x2F;CD 的相關課程。在課程中，掌握了 Docker、Docker Compose 以及 GitLab 自動化部署的技能，並將其應用於工作專案中，大大提升了開發和部署效率。這項學習經歷讓我能夠以更自動化的方式來進行版本控制與部署，也進一步強化了我的技術架構設計能力。 AI 應用學習：搭建 GPT 串接服務的 Side Project在 AI 領域的應用中，我創建了一個 Side Project，並租用雲端主機架設後端伺服器，串接 GPT 的 API，讓使用者可以註冊、訂閱並客製化知識內容，還能串接到特定的社群媒體平台。這項專案還在持續開發中，但我已經收穫了不少實踐經驗，並深入了解了 AI 與應用程式的整合流程。 前端學習：進一步拓展技能雖然我的主力是後端開發，但在項目過程中，我開始學習 JavaScript 和 Vue 框架的應用。通過這些學習，我逐步掌握了前端設計的基礎，並學會了如何與後端進行無縫對接。這種多方面的技能拓展讓我在技術開發上更加游刃有餘，也讓我對技術整合有了更深的理解。 證照GCP completion of fundamentals and infrastructure：2024年8月27日 Toeic 730分：2022年9月 JLPT N3：2014年1月"}],"posts":[{"title":"Linux征途·第三話：WSL的安裝","slug":"Linux征途·第三話：WSL的安裝","date":"2025-02-14T10:43:35.000Z","updated":"2025-02-14T11:24:18.930Z","comments":true,"path":"2025/02/14/Linux征途·第三話：WSL的安裝/","permalink":"https://miruorange.github.io/blog/2025/02/14/Linux%E5%BE%81%E9%80%94%C2%B7%E7%AC%AC%E4%B8%89%E8%A9%B1%EF%BC%9AWSL%E7%9A%84%E5%AE%89%E8%A3%9D/","excerpt":"","text":"前言在前一篇文章，我們聊到了該學哪個版本的 Linux。如果你決定從 Ubuntu 開始，那麼最簡單的方式就是直接在 Windows 上安裝 WSL（Windows Subsystem for Linux）。 WSL 讓你不用安裝虛擬機或雙系統，就能直接在 Windows 裡跑 Linux，對於開發者和學習者來說超級方便。今天就來教你如何安裝 WSL，讓你的 Linux 之旅正式開始！ 進入命令提示字元（cmd）首先，請在畫面左下的搜尋框裡, 輸入 cmd，然後按 Enter 鍵開啟命令提示字元。 你也可以使用 PowerShell，方法是一樣的。 安裝 WSL直接輸入以下指令： 1wsl --install 這個指令會自動安裝 WSL2 及預設的 Linux 發行版（通常是 Ubuntu）。 注意： 如果你的 Windows 版本太舊（低於 Windows 10 版本 2004），可能需要手動啟用 WSL 功能。 確認 WSL 版本安裝完成後，輸入以下指令查看 WSL 版本： 1wsl --version 使用 WSL 2比WSL 1的效能來得更好，也支援完整的 Linux 核心。 要檢查目前的 WSL 版本，可以輸入： 1wsl -l -v 這會顯示你已安裝的 Linux 發行版及它們使用的 WSL 版本，例如： 12 NAME STATE VERSION* Ubuntu Running 2 啟動 WSL當 WSL 安裝完成後，直接輸入： 1wsl 這將啟動預設的 Linux 發行版（通常是 Ubuntu）。 小技巧：如果你安裝了多個 Linux 版本，可以使用以下指令切換： 1wsl -s &lt;發行版名稱&gt; 例如： 1wsl -s Debian 常見問題與解決方法1. 如何安裝不同的 Linux 版本？如果你不想用 Ubuntu，可以用以下指令查看可用的發行版： 1wsl --list --online 然後安裝你想要的版本，例如安裝 Debian： 1wsl --install -d Debian 3. 如何移除 WSL？如果你想完全移除 WSL，可以執行： 1wsl --unregister &lt;發行版名稱&gt; 例如移除 Ubuntu： 1wsl --unregister Ubuntu 結語安裝 WSL 是開始學習 Linux 最簡單的方式，你不需要額外的硬體或安裝虛擬機，就能在 Windows 直接運行 Linux。 下一篇文章，我們將帶你進一步熟悉 WSL 的基本操作，包括 檔案系統、套件管理、與 Windows 互動 等等，讓你的 Linux 之旅更進一步！🚀 準備好了嗎？我們下一篇見！😊","categories":[],"tags":[]},{"title":"Linux征途·第二話：我要學哪個版本的Linux","slug":"Linux征途·第二話：我要學哪個版本的Linux","date":"2024-11-16T02:34:26.000Z","updated":"2024-11-16T03:14:48.228Z","comments":true,"path":"2024/11/16/Linux征途·第二話：我要學哪個版本的Linux/","permalink":"https://miruorange.github.io/blog/2024/11/16/Linux%E5%BE%81%E9%80%94%C2%B7%E7%AC%AC%E4%BA%8C%E8%A9%B1%EF%BC%9A%E6%88%91%E8%A6%81%E5%AD%B8%E5%93%AA%E5%80%8B%E7%89%88%E6%9C%AC%E7%9A%84Linux/","excerpt":"","text":"先上結論如果你剛開始接觸 Linux，我推薦你從 Ubuntu 開始學習。為什麼？因為它簡單好用，資源又多，而且 Windows 的 WSL（Windows Subsystem for Linux）預設用的就是 Ubuntu，直接開箱即用，不用安裝虛擬機，對於新手來說非常友善。 就拿我自己來說，不管是平常寫 Side Project 還是在公司裡工作，大多用的也是 Ubuntu！重點是它免費又夠用啊！而且不同版本之間，基本指令其實都差不多，學了 Ubuntu 以後，你要切換到別的版本也很快上手，完全不用擔心「學了白學」這種事。 什麼叫做 Linux 的核心 (Kernel)要了解 Linux，先來搞清楚什麼是「核心」。 電腦其實就像一堆硬體零件拼起來的機器，想讓它動起來，總得有個「翻譯官」幫我們把需求講給硬體聽。比如你敲鍵盤，電腦怎麼知道你按的是哪個鍵？這些事情全靠作業系統的核心處理，而 Linux 核心 就是這個翻譯官。 打個比方，電腦就像一輛車，Linux 核心是它的「引擎」。有了引擎，車子才能跑起來，但如果沒有方向盤、車架和座椅呢？那這車也沒法開。所以，我們需要在核心之外，再配上一些工具和軟體，這些就是我們常說的「發行版本」。 什麼是 Linux 發行版本簡單來說，Linux 發行版本就是把「核心」和其他實用工具包裝在一起的一個「套裝版」，用起來更方便，適合不同需求的使用者。 就像車有不同的型號一樣，有的車適合賽車手，有的適合帶孩子上下學，有的專為運貨設計。同樣，Linux 的發行版本也有很多選擇，雖然它們的核心（引擎）一樣，但裡面的工具和設計方向可能很不一樣。下面我介紹幾個比較有名的版本： Ubuntu 性質：免費軟體，由 Canonical 公司開發，社群也有參與維護。 優點： 免費而且容易上手，對初學者非常友好。 網上有超多學習資源和社群可以幫你解答問題。 更新速度快，可以試到不少最新的功能。 缺點： 雖然有「LTS」長期支援版，但如果真的遇到很複雜的問題，可能還是得靠自己多查資料，因為不像商業產品那樣有專人技術支援。 適合誰：想試試 Linux 的新手、需要快速搭建開發環境的程式設計師。 Red Hat (RHEL) 性質：商業版，由 Red Hat 公司開發，提供企業級支援。 優點： 非常穩定，很多公司用它來當伺服器系統。 有專業的技術支援，安全性和可靠性都很高。 它家的證照（比如 RHCE、RHCA）在 IT 界可是「黃金招牌」，很多大公司都認。 缺點： 要花錢買授權，對於個人來說成本比較高。 適合誰：公司用戶，或者想深度學習企業級 Linux 的工程師。 其他發行版本簡介 Debian 非常穩定的版本，也是 Ubuntu 的上游來源。適合追求穩定性、不需要太多新功能的人。 Fedora Red Hat 社群版，比較前沿，適合想要嘗試最新技術的開發者。 Kali Linux 專門為資安和滲透測試設計，內建很多安全工具。 openSUSE 分為 Leap（穩定版）和 Tumbleweed（滾動更新版），適合開發或伺服器管理。 Alpine Linux 極簡、輕量級版本，非常適合資源受限的環境，比如容器化系統。 為什麼推薦 Ubuntu？對於新手來說，Ubuntu 真的是最友好的選擇，理由如下： 資源超多：不管是教學影片還是解答論壇，搜尋 Ubuntu 相關問題幾乎都能找到答案。 WSL 支援：Windows 提供的 WSL 預設就安裝 Ubuntu，免去一堆繁瑣的設定，直接上手。 穩定又現代：穩定性和新功能兼具，對於平時學習、開發都很適合。 重點是，Ubuntu 的學習門檻低，幾乎不會踩坑，讓你可以專注學習 Linux 的基礎操作。 結語學 Linux，就像開啟了一場全新的冒險。雖然一開始有點難，但只要選對了發行版本，學習曲線會變得很平緩。對於剛入門的人，我還是建議先從 Ubuntu 開始，熟悉之後你可以再試試像 RHEL 或 Kali 這樣的專業發行版。 下一篇文章，我會帶你從 WSL 開始安裝 Ubuntu，一起實戰操作，讓你的 Linux 征途真正啟動！準備好動手了嗎？我們下一篇見！😊","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://miruorange.github.io/blog/tags/Linux/"}]},{"title":"Linux征途·第一話：為什麼要學Linux","slug":"Linux征途·第一話：為什麼要學Linux","date":"2024-11-04T14:52:32.000Z","updated":"2024-11-07T00:09:28.475Z","comments":true,"path":"2024/11/04/Linux征途·第一話：為什麼要學Linux/","permalink":"https://miruorange.github.io/blog/2024/11/04/Linux%E5%BE%81%E9%80%94%C2%B7%E7%AC%AC%E4%B8%80%E8%A9%B1%EF%BC%9A%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81%E5%AD%B8Linux/","excerpt":"","text":"第一個系列文部落格開張後，我一直在思索該寫什麼主題。各種想法在腦海中反覆浮現，卻始終無法確定。直到今天，主管向新進人員介紹我時，竟然用了 Infra 這個詞來形容我的職位。真是意外之喜，何德何能呀！的確我平時的工作除了後端的開發外, 也擔負著系統的維護的責任。最近為了解一些資安的需求, 剛好也在進一步鑽研Linux, 既然如此, 那就先寫篇Linux的系列文吧。 Infra 是 Infrastructure 的縮寫，代表我負責公司或團隊的基礎設施層面工作。這包括系統管理、自動化和部署、監控和日誌管理、容器化，以及安全性等領域。 初學者的困惑我是一名轉職進入這個行業的人，因此對於剛踏入這個領域的新手心態非常了解，因為我曾經走過同樣的路。很多新手可能會有這樣的疑問：學完了基礎的編程知識後，接下來該怎麼辦？會寫迴圈、陣列、流程控制後，還能做什麼？我好像懂了什麼, 那下一步該學什麼？這種不確定感，我非常熟悉，因為我也曾經困惑過。 程式學習的目標：自動化其實，學習程式的最終目的往往是自動化。自動化讓我們能夠隨時隨地自動獲取資訊，讓電腦來處理重複、繁瑣的工作，減少人力消耗。然而，如果每次都需要手動執行已寫好的程式，這未免顯得效率低下且過於繁瑣。這時候，你需要的是一台能夠24小時持續運行的機器，也就是我們所說的Server。 什麼是Server？Server本質上就是一台可以執行程式的電腦主機。它可以是桌上型電腦、筆記型電腦，甚至像我一樣，使用樹莓派來搭建一台個人Server也完全可行。點此觀看我如何在樹莓派上安裝Linux系統 Server的應用場景當你擁有一台能夠連網的Server，再加上你所掌握的編程技術，你就能完成很多事情。對我來說，最有趣的應用之一就是在我的樹莓派上安裝爬蟲程式，定期抓取我需要的資訊並整理成報告，甚至自動發送郵件給自己。 超越爬蟲的可能性除了爬蟲，還可以利用Server的排程功能來執行不同的程式，串接各種API，進而實現許多實用的功能。例如，自動收集天氣預報、空氣品質數據，或者搭建一個個人網站，無論是部落格、形象網站，還是電子商務平台，甚至是搭建一個AI的智能機器人, 皆可實現。 為什麼選擇Linux？為什麼？因為它免費、高效、省電、多工。當你學會了編程，再掌握Linux的操作，就如同打通了任督二脈——唯有你想不到的，沒有你做不到的。因此，為什麼不開始學習Linux呢？ 常見問題 (FAQ)Q1: Server只能建在Linux環境上嗎？不一定！事實上，只要是能運行排程任務的電腦，都可以作為 Server 使用。Server 的重點不在於操作系統，而是在於服務的目的性和穩定性。舉例來說，一個網站的 Server 就專注於提供網頁服務，因此我們不會在 Server 上安裝影音播放器、文字處理軟體（如 Word、Excel）等不必要的程式。這樣精簡的配置，不僅能降低硬體的負擔，還能讓 Server 更加省電、高效、穩定地運行。 Q2: Linux和windows及mac os是不一樣的東西嗎？是的，Linux、Windows 和 macOS 是三個不同的操作系統，各自有不同的設計哲學與用途。 Linux 是一個開放原始碼的操作系統，常被用作 Server 系統。它以穩定性和靈活性著稱，並且提供了強大的命令行工具，使得在自動化和伺服器環境中非常高效。 Windows 是微軟開發的操作系統，更常用於個人電腦和商務環境。它擁有豐富的圖形化介面和廣泛的軟體支援，適合辦公軟體和多媒體應用，但在 Server 領域上比較少見。 macOS 是蘋果開發的操作系統，主要用於蘋果的筆記型電腦和桌上型電腦。macOS 基於 Unix，因此和 Linux 在底層設計上有相似之處。由於其穩定性和開發工具的便利性，macOS 深受開發者歡迎。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://miruorange.github.io/blog/tags/Linux/"}]},{"title":"記錄撰寫技術Blog的第一天","slug":"記錄撰寫技術Blog的第一天","date":"2024-10-27T01:40:21.000Z","updated":"2024-11-01T01:22:31.237Z","comments":true,"path":"2024/10/27/記錄撰寫技術Blog的第一天/","permalink":"https://miruorange.github.io/blog/2024/10/27/%E8%A8%98%E9%8C%84%E6%92%B0%E5%AF%AB%E6%8A%80%E8%A1%93Blog%E7%9A%84%E7%AC%AC%E4%B8%80%E5%A4%A9/","excerpt":"","text":"初衷為什麼要開始寫技術部落格？作為一名後端工程師，我一直渴望有一個屬於自己的平台來記錄學習過程中的每一步。這不僅僅是追蹤成長的軌跡，更是希望能通過撰寫和整理知識來鞭策自己持續學習。當日常工作中遇到挑戰或解決棘手的問題時，把這些經驗寫成文章，不僅加深了理解，也讓未來回顧時更加方便，甚至可能幫助到和我有相似經歷的開發者們。 精進全端技能作為一名後端工程師，我一直感到在後端開發中缺乏一種「看得見」的成果呈現方式。僅僅靠後端的程式碼與邏輯，往往難以清楚展示自己的技術深度和實力。思索之下，建立一個技術部落格成為了最佳選擇。通過從無到有地架設一個完整的網站，不僅讓我得以展示所學，還能讓這個網站成為我成長歷程的見證，更進一步地提升了我在全端開發中的綜合技能。 在架設部落格的過程中，我逐步發現前端開發比想像中更需要細膩的理解。從最基礎的 HTML 和 CSS 開始，深入到 JavaScript 和 Node.js 的應用，每一步都需要大量的查閱資料和不斷試錯。透過這個過程，我逐漸掌握了 DOM 操作、事件處理、樣式微調等技術細節。雖然這些前端的細節探索有時繁瑣，但也帶來了滿滿的成就感，讓我對前後端的整合有了更全面的理解。這段深耕的過程不僅提升了我的技能，也讓我更堅信這條全端開發之路的價值。 自我介紹我是 Ken Hsu，後端開發工程師，專注於以下技術領域： 作業系統：Ubuntu (Linux) 資料庫：MySQL、PostgreSQL、Oracle、Redis 後端框架：Python Flask，並善於使用 async 技術以優化 I&#x2F;O 密集型應用的並發處理 前端技能：HTML, CSS,SCSS, Bootstrap, Javascript, Vue.js 任務隊列與異步處理：使用 Celery 進行任務隊列管理，讓後端處理能夠非同步執行並提升效率 容器化技術：Docker、Docker Compose CICD: Gitlab 伺服器配置：Nginx 作為反向代理和負載均衡 API 測試：Postman 資料處理：Pandas 網路爬蟲：Beautiful Soup、Selenium 影像辨識：pytesseract AI 應用：使用 GPT 模型串接 RAG 服務 第三方服務整合： LINE Google API 綠界科技 開發工具：ngrok 用於本地服務外網測試 成長及專案經驗2022 年 iThome 鐵人賽：挑戰自我、持續精進在 2022 年，我參加了 iThome 鐵人賽，這是一項每日持續挑戰的技術分享賽事。為了完成主題為「三十天全端工程師挑戰」的教學影片，我在 Raspberry Pi 上架設了簡易的購物商城，實現了基本的全端開發功能。這段經歷讓我在高度專注的狀態下學習，幾乎是「不眠不休」地完成了整個項目，讓我快速掌握了技術應用並鍛煉了專案管理能力。 Raspberry Pi 部署服務：結合硬體及軟體在學習後端技術之初，我利用 Raspberry Pi 架設了小型伺服器，並部署了網路爬蟲程式來收集數據並進行自動化處理。這是我第一次將技術應用於硬體平台，從安裝系統到配置網路，每一個步驟都讓我深刻體會到系統架設的細緻與成就感。這項經驗不僅讓我理解了硬體伺服器的部署，也大大提升了我處理網路爬蟲與數據處理的能力。在2024年, 甚至因為使用爬蟲爬取租屋網站, 獲得了Joeman的採訪。 GitLab CI&#x2F;CD 學習：實踐自動化部署為了加強 CI&#x2F;CD 能力，我利用假日時間參加了 GitLab CI&#x2F;CD 的相關課程。在課程中，掌握了 Docker、Docker Compose 以及 GitLab 自動化部署的技能，並將其應用於工作專案中，大大提升了開發和部署效率。這項學習經歷讓我能夠以更自動化的方式來進行版本控制與部署，也進一步強化了我的技術架構設計能力。 AI 應用學習：搭建 GPT 串接服務的 Side Project在 AI 領域的應用中，我創建了一個 Side Project，並租用雲端主機架設後端伺服器，串接 GPT 的 API，讓使用者可以註冊、訂閱並客製化知識內容，還能串接到特定的社群媒體平台。這項專案還在持續開發中，但我已經收穫了不少實踐經驗，並深入了解了 AI 與應用程式的整合流程。 前端學習：進一步拓展技能雖然我的主力是後端開發，但在項目過程中，我開始學習 JavaScript 和 Vue 框架的應用。通過這些學習，我逐步掌握了前端設計的基礎，並學會了如何與後端進行無縫對接。這種多方面的技能拓展讓我在技術開發上更加游刃有餘，也讓我對技術整合有了更深的理解。 心得不斷學習的動力這是我的第一篇技術部落格文章，象徵著全新的開始和一種對自己的承諾：我會堅持記錄每一次學習和成長，不斷督促自己進步。未來希望這裡能成為自己技術成長的日誌，記錄探索 AI、後端和整合應用的每一步，也能成為其他開發者的學習資源。 技術成長的印記架設部落格的過程中，我意識到自己的不足，同時也被激發了對新技術的好奇心和動力。無論過程多繁瑣，這份記錄讓我看見自己的成長，而這僅僅是開始。我期望未來在這裡留下更多學習的足跡，提醒自己無論工作多忙碌，學習的步伐都不能停下來。 感謝這一天，為我揭開了技術紀錄的新篇章。期待接下來的每一步，成為我技術之路上堅實的印記。","categories":[],"tags":[{"name":"個人介紹","slug":"個人介紹","permalink":"https://miruorange.github.io/blog/tags/%E5%80%8B%E4%BA%BA%E4%BB%8B%E7%B4%B9/"}]}],"categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://miruorange.github.io/blog/tags/Linux/"},{"name":"個人介紹","slug":"個人介紹","permalink":"https://miruorange.github.io/blog/tags/%E5%80%8B%E4%BA%BA%E4%BB%8B%E7%B4%B9/"}]}